{"version":3,"sources":["components/InputAutocomplete.js","components/Modal.js","components/Search.js","components/Landing.js","components/GameBoard.js","components/Gallery.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["InputAutocomplete","props","Autocomplete","className","value","this","userInput","onChange","onAutoCompleteItemSelected","options","autoCompleteWords","getOptionLabel","option","word","renderInput","params","TextField","onTextChange","variant","label","placeholder","margin","fullWidth","React","Component","Modal","hideModal","setState","hide","animationEnd","e","state","showModal","handleSubmit","preventDefault","show","whichModal","onAnimationEnd","src","alt","onClick","action","onSubmit","helperText","badwordsArray","require","push","Search","event","target","innerText","trim","axios","then","result","singleWords","i","data","length","includes","indexOf","getRandomWord","randomWord","randomWords","Math","floor","random","method","url","rel_trg","max","res","generatedWords","map","id","JSON","stringify","score","setGeneratedWords","modalShow","modal","type","Landing","columnsFromBackend","name","items","content","GameBoard","useState","columns","setColumns","onDragEnd","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","splice","index","removed","column","copiedItems","Object","entries","key","direction","provided","snapshot","droppableProps","ref","innerRef","style","background","isDraggingOver","item","draggableId","draggableProps","dragHandleProps","backgroundColor","isDragging","Gallery","goHome","firebase","database","on","val","changePage","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","targetPage","currentPage","poemSubmit","poem","alert","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d494b3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default class InputAutocomplete extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    \r\n\r\nrender() {\r\n    return (\r\n    <div>\r\n        <Autocomplete className=\"test\"\r\n        value={this.props.userInput}\r\n        onChange={this.props.onAutoCompleteItemSelected}\r\n            options={this.props.autoCompleteWords}\r\n            // Choosing the randomize option gives us a string instead of an object with word and score\r\n            //When there is no word property, just use the option itself (null coalescing)\r\n            getOptionLabel={option => option.word ?? option}\r\n            renderInput={params => (\r\n                <TextField\r\n                {...params}\r\n                \r\n                onChange={this.props.onTextChange}\r\n                variant=\"standard\"\r\n                label=\"Type in a word\"\r\n                placeholder=\"\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        )}\r\n        />\r\n    </div>\r\n    );\r\n}\r\n}\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nclass Modal extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {hide : false}\r\n    }\r\n\r\n    hideModal = () => this.setState({hide: true})\r\n\r\n    animationEnd = (e) => {\r\n        if (this.state.hide) {\r\n        this.props.showModal(e, false)\r\n        }\r\n        this.setState({hide: false})\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    render() {\r\n        const { show, whichModal } = this.props\r\n        const { hide } = this.state\r\n        return(\r\n        // check prop to see which modal to show:\r\n            whichModal === \"start\" && // START modal: \r\n                <div \r\n                    className={`app__container__leftLanding__modal \r\n                        ${hide ? \"slideLeft\" : \"\"} \r\n                        ${show ? \"slideRight\" : \"\"}`}\r\n                    onAnimationEnd={(e) => this.animationEnd(e)}\r\n                >\r\n                    <div className=\"app__container__leftLanding__modal__modalInner modalStart\">\r\n                        <img src=\"./assets/illustrations--instruct.png\" alt=\"illustration of a person deep in thought\"/>\r\n                        <h2>How it works</h2>\r\n                        <p>We've generated a bunch of words for you on the left. Simply drag and drop them into your canvas on the right!</p>\r\n                        <button onClick={this.hideModal}>Start <span>🧲</span></button>\r\n                    </div>\r\n                </div>\r\n        // check prop to see which modal to show:\r\n            || \r\n            whichModal === \"share\" && // SHARE modal: \r\n                <div \r\n                    className={`app__container__leftLanding__modal \r\n                        ${hide ? \"slideLeft\" : \"\"} \r\n                        ${show ? \"slideRight\" : \"\"}`}\r\n                    onAnimationEnd={(e) => this.animationEnd(e)}\r\n                >\r\n                    <div className=\"app__container__leftLanding__modal__modalInner modalShare\">\r\n                        <img src=\"./assets/illustrations--save.png\" alt=\"illustration of a person sharing ideas to the digital cloud\"/>\r\n                        <h2>Share your poem</h2>\r\n                        <form action=\"\" onSubmit={this.handleSubmit}>\r\n\r\n                            \r\n                        {/* <form className={classes.root} noValidate autoComplete=\"off\"> */}\r\n\r\n                            <TextField \r\n                            variant=\"outlined\"\r\n                            label=\"Title\"\r\n                            placeholder=\"\"\r\n                            margin=\"normal\"\r\n                            helperText=\"Name your masterpiece\"\r\n                            margin=\"normal\"\r\n                            />\r\n\r\n                            <TextField \r\n                            variant=\"outlined\"\r\n                            label=\"Author\"\r\n                            placeholder=\"\"\r\n                            margin=\"normal\"\r\n                            helperText=\"sign your masterpiece\"\r\n                            margin=\"normal\"\r\n                            />\r\n\r\n                            {/* <label htmlFor=\"poemTitle\">Title:</label>\r\n                            <input type=\"text\" name=\"poemTitle\" id=\"poemTitle\"/> */}\r\n\r\n                            {/* <label htmlFor=\"poemAuthor\">Author:</label>\r\n                            <input type=\"text\" name=\"poemAuthor\" id=\"poemAuthor\"/> */}\r\n                            \r\n                            {/* work on add to gallery function */}\r\n                            <button onClick={this.hideModal}>Add to Gallery</button>\r\n                            {/* work on share function */}\r\n                            <button onClick={this.hideModal}>Share</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport InputAutocomplete from './InputAutocomplete.js' \r\nimport Modal from './Modal.js'\r\nimport axios from 'axios'\r\nlet badwordsArray = require('badwords/array');\r\nbadwordsArray.push(\"fuckup\", \"bitchy\", \"bitchery\", \"bitchiness\", \"bitched\", \"bitchen\", \"shittah\", \"shittim\", \"shitfaced\", \"shittle\", \"nigget\", \"niggerhead\", \"niggerheads\", \"niggerling\", \"nigged\", \"niggery\", \"niggle\", \"faggy\", \"fagged\", \"faggots\", \"faggoty\", \"faggotry\", \"faggoting\", \"faggoted\", \"cunty\", \"cunted\", \"cunting\")\r\n\r\n\r\nexport class Search extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            userInput: \"\",\r\n            modal: false,\r\n            autoCompleteWords: [],\r\n            randomWords: [\"Kitten\", \"Tacos\", \"Hockey\", \"Monkey\", \"Muffin\"]\r\n        }\r\n    }\r\n\r\n    onAutoCompleteItemSelected = (event) => {\r\n        // When the user uses the arrow keys or a mouse to select items\r\n        // from the autocomplete dropdown, onChange is not fired for the \r\n        // text input. Instead, we have to listen to onChange for the parent element.\r\n        this.setState({\r\n            userInput: event.target.innerText\r\n        });\r\n    }   \r\n    \r\n    onTextChange = (event) => {\r\n\r\n        this.setState({\r\n            userInput: event.target.value\r\n        });\r\n\r\n        if (this.state.userInput.trim() !== \"\") {\r\n            axios(\"https://api.datamuse.com/sug?s=\" + this.state.userInput)\r\n                .then(result => {\r\n                    //for loop to ensure only single words are suggested\r\n                    let singleWords = []\r\n                    for (let i=0; i < result.data.length; i++) {\r\n                        if (!result.data[i]['word'].includes(\" \") && badwordsArray.indexOf(result.data[i]['word']) === -1)  {\r\n                            singleWords.push(result.data[i])\r\n                        }\r\n                    }\r\n\r\n                    this.setState({\r\n                        autoCompleteWords: singleWords\r\n                    })\r\n                });\r\n        }\r\n        else {\r\n            this.setState({\r\n                autoCompleteWords: []\r\n            })\r\n        }\r\n    }\r\n\r\n    getRandomWord = () => {\r\n        let randomWord = this.state.randomWords[Math.floor(Math.random() * this.state.randomWords.length)]\r\n        this.setState({userInput:randomWord})\r\n    }    \r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.showModal(event, true)\r\n\r\n        axios({\r\n            method: 'GET',\r\n            url: `https://api.datamuse.com/words`,\r\n            params: {\r\n                rel_trg: this.state.userInput,\r\n                max: 50\r\n            }\r\n        })\r\n        .then((res) => {\r\n            \r\n            const generatedWords = res.data.map((value) => {\r\n                return {word: value.word, id: JSON.stringify(value.score)}\r\n            })\r\n            \r\n            this.props.setGeneratedWords(generatedWords)\r\n        })\r\n    }    \r\n\r\n    showModal = (e, modalShow) => {\r\n        e.preventDefault()\r\n        this.setState({modal: modalShow})\r\n        // load next page here also.\r\n    }\r\n\r\n    render() {\r\n        const { userInput } = this.state\r\n        const { modal } = this.state\r\n        return (\r\n            <>\r\n                <Modal show={modal} showModal={this.showModal} whichModal=\"start\" />\r\n                <form action=\"\" onSubmit={this.handleSubmit}>\r\n                    <InputAutocomplete onTextChange={this.onTextChange} autoCompleteWords={this.state.autoCompleteWords} onAutoCompleteItemSelected={this.onAutoCompleteItemSelected} \r\n                    userInput = {this.state.userInput }/>\r\n                    <button className=\"main-button\" type=\"submit\">Get Started ➡</button>\r\n                </form>\r\n                <button className=\"secondary-button\" onClick={this.getRandomWord}>Generate Word ⚡</button>\r\n            </>\r\n        )\r\n    }\r\n}  \r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\nimport Search from './Search.js'\r\n\r\nclass Landing extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"app__container__leftLanding\">\r\n                    <h1 className=\"main-header\">Recreate the IRL fun of magnetic poetry</h1>\r\n                    <div className=\"container__form\">\r\n                        <Search setGeneratedWords={this.props.setGeneratedWords}/>\r\n                        <p className=\"main-paragraph\">Give us your own prompt to kick things off or let us generate a word for you.</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"app__container__rightLanding\">\r\n                    <img src=\"./assets/illustrations--landing.png\" alt=\"illustration of a person moving one post-it from a board of 18 other post-its\"/>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Landing","import React, { useState } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst itemsFromBackend = [\r\n    {id: '123', content: 'a'},\r\n    {id: '124', content: 'an'},\r\n    {id: '125', content: 'the'},\r\n    {id: '126', content: 'that'},\r\n    {id: '127', content: 'this'},\r\n    {id: '128', content: 'those'},\r\n    {id: '129', content: 'these'},\r\n    {id: '120', content: 'my'},\r\n    {id: '131', content: 'your'},\r\n    {id: '132', content: 'their'},\r\n    {id: '133', content: 'our'},\r\n    {id: '134', content: 'ours'},\r\n    {id: '135', content: 'whose'},\r\n    {id: '136', content: 'his'},\r\n    {id: '137', content: 'hers'},\r\n    {id: '138', content: 'its'},\r\n    {id: '139', content: 'which'},\r\n    {id: '130', content: 'some'},\r\n    {id: '141', content: 'both'},\r\n    {id: '142', content: 'most'},\r\n    {id: '143', content: 'many'},\r\n    {id: '144', content: 'a few'},\r\n    {id: '145', content: 'a lot of'},\r\n    {id: '146', content: 'any'},\r\n    {id: '147', content: 'much'},\r\n    {id: '148', content: 'a little'},\r\n    {id: '149', content: 'enough'},\r\n    {id: '140', content: 'several'},\r\n    {id: '151', content: 'none'},\r\n    {id: '152', content: 'all'},\r\n]\r\n\r\nconst columnsFromBackend = \r\n    {\r\n        '202': {\r\n            name: 'generated words',\r\n            items: itemsFromBackend,\r\n        },\r\n        '203': {\r\n            name: 'sandbox',\r\n            items: [],\r\n        },\r\n    };\r\n\r\nconst onDragEnd = (result, columns, setColumns) => {\r\n    if(!result.destination) return;\r\n        const { source, destination } = result;\r\n    if(source.droppableId !== destination.droppableId) {\r\n        const sourceColumn = columns[source.droppableId];\r\n        const destColumn = columns[destination.droppableId]\r\n        const sourceItems = [...sourceColumn.items];\r\n        const destItems = [...destColumn.items]; \r\n        const [removed] = sourceItems.splice(source.index, 1);\r\n        destItems.splice(destination.index, 0, removed);\r\n        setColumns({\r\n            ...columns,\r\n            [source.droppableId]: {\r\n                ...sourceColumn,\r\n                items: sourceItems\r\n            },\r\n            [destination.droppableId]: {\r\n                ...destColumn,\r\n                items: destItems\r\n            }\r\n        })\r\n    } else {\r\n        const column = columns[source.droppableId];\r\n        const copiedItems = [...column.items]\r\n        const [removed] = copiedItems.splice(source.index, 1);\r\n        copiedItems.splice(destination.index, 0, removed);\r\n        setColumns({\r\n            ...columns,\r\n            [source.droppableId]: {\r\n                ...column,\r\n                items: copiedItems,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction GameBoard() {\r\n    const [columns, setColumns] = useState(columnsFromBackend);\r\n    return (\r\n        <div className=\"app__container__gameBoard\">\r\n            <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\r\n                {Object.entries(columns).map(([id, column]) => {\r\n                    return (\r\n                        <div className=\"app__container__gameBoard__column\">\r\n                            <h2>{column.name}</h2>\r\n                            {/* <div style={{margin: 8}}> */}\r\n                            <Droppable droppableId={id} key={id} direction=\"horizontal\">\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <div className=\"app__container__gameBoard__column__dropArea\"\r\n                                            {...provided.droppableProps}\r\n                                            ref={provided.innerRef}\r\n                                            style={{\r\n                                            background: snapshot.isDraggingOver ? '#FFFEB9' : '#E6E7E9',\r\n                                            }}\r\n                                        >\r\n                                            {column.items.map((item, index) => {\r\n                                            return (\r\n                                                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                                                {(provided, snapshot) => {\r\n                                                    return (\r\n                                                        <div className=\"app__container__gameBoard__column__dropArea__item\"\r\n                                                            ref={provided.innerRef}\r\n                                                            {...provided.draggableProps}\r\n                                                            {...provided.dragHandleProps}\r\n                                                            style={{\r\n                                                            backgroundColor: snapshot.isDragging ? '#E4FFE3' : '#85FB83',\r\n                                                            ...provided.draggableProps.style\r\n                                                            }}\r\n                                                        >\r\n                                                            {item.content}\r\n                                                        </div>\r\n                                                    )\r\n                                                }}\r\n                                                </Draggable>\r\n                                            );\r\n                                            })}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                            {/* </div> */}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\n\r\nclass Gallery extends Component {\r\n    componentDidMount() {\r\n        // get data from FB, map over data to load on DOM\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (result) => {\r\n            const data = result.val()\r\n        })\r\n    }\r\n\r\n    goHome = () => {\r\n        // go back to landing\r\n    }\r\n\r\n    render() { \r\n        const { changePage } = this.props\r\n        return (\r\n            // check prop to see which modal to show:\r\n            <div className=\"app__container__gallery\">\r\n                <h1>Some Poetic Title for a Gallery</h1>\r\n                <div className=\"app__container__gallery__grid\">\r\n                    {/* map over array of data from firebase */}\r\n                </div>\r\n                <button>More v</button>\r\n                <button onClick={() => changePage('landing')}>Home</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gallery;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyDoTP0Xz-PygNrXuRREHvJvOIdOk1kEbVI\",\r\n    authDomain: \"fridgemagnetpoems.firebaseapp.com\",\r\n    databaseURL: \"https://fridgemagnetpoems.firebaseio.com\",\r\n    projectId: \"fridgemagnetpoems\",\r\n    storageBucket: \"fridgemagnetpoems.appspot.com\",\r\n    messagingSenderId: \"17676352973\",\r\n    appId: \"1:17676352973:web:bb2f5253a5a36717a11884\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase","import React, { Component } from 'react';\r\nimport Landing from './components/Landing.js';\r\nimport GameBoard from './components/GameBoard'\r\nimport Gallery from './components/Gallery.js';\r\nimport firebase from './firebase.js';\r\nimport './styles/styles.scss';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n        currentPage : 'landing',\r\n        generatedWords: [] ,\r\n        // push each word into poem array when dragged into staging area\r\n        poem : []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // firebase stuff and poemSubmit will probably be moved to a gallery component later?\r\n        // firebase:\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (result) => {\r\n            const data = result.val()\r\n            console.log(data)\r\n        })\r\n        // firebase ---\r\n    }\r\n\r\n    setGeneratedWords = (generatedWords) => {\r\n        this.setState({\r\n            generatedWords: generatedWords\r\n        })\r\n    }\r\n\r\n    changePage = (targetPage) => this.setState({currentPage: targetPage})\r\n\r\n    poemSubmit = () => {\r\n        const {poem} = this.state // destructuring state for clean code\r\n        const maxWordsInPoem = 10 // placeholder number for now\r\n        if (poem.length <= maxWordsInPoem && poem.length > 2) {\r\n            const dbRef = firebase.database().ref()\r\n            dbRef.push(poem)\r\n            this.setState({poem: []})\r\n        // error handling:\r\n        } else if (poem.length < 3) {\r\n            alert('You need more than 2 words in your poem.')\r\n        } else if (poem.length > maxWordsInPoem ) {\r\n            alert(`Your poem is too long! Nothing longer than ${maxWordsInPoem} please.`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {currentPage} = this.state\r\n        return (\r\n            <div className=\"app wrapper\">\r\n                <nav className=\"app__nav\">\r\n                    <ul>\r\n                        <li className=\"nav__branding\"\r\n                            onClick={() => this.changePage('landing')}\r\n                        >\r\n                            Project Name\r\n                        </li>\r\n                        {/* testing purpose: */}\r\n                        <li className=\"nav__link\"\r\n                            onClick={() => this.changePage('gameBoard')}\r\n                        >\r\n                            Gameboard testing\r\n                        </li>\r\n                        <li className=\"nav__link\" \r\n                            onClick={() => this.changePage('gallery')}\r\n                        >\r\n                            Gallery\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <div className=\"app__container\">\r\n                    {\r\n                        currentPage === 'landing' &&\r\n                            <Landing  setGeneratedWords={this.setGeneratedWords} /> \r\n                        || \r\n                        currentPage === 'gameBoard' &&\r\n                            <GameBoard />\r\n                        || \r\n                        currentPage === 'gallery' &&\r\n                            <Gallery changePage={this.changePage}/>\r\n                    }\r\n                \r\n                </div>\r\n                <footer className=\"app__footer\">\r\n                    <div>\r\n\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}