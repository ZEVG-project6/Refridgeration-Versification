{"version":3,"sources":["components/InputAutocomplete.js","components/Search.js","components/Landing.js","components/firebase.js","components/Modal.js","components/GeneratedWord.js","components/GameBoard.js","components/Gallery.js","App.js","serviceWorker.js","index.js","assets/illustrations--landing.png","assets/illustrations--instruct.png","assets/illustrations--save.png"],"names":["InputAutocomplete","props","Autocomplete","className","value","this","userInput","onChange","onAutoCompleteItemSelected","options","autoCompleteWords","getOptionLabel","option","word","renderInput","params","TextField","onTextChange","variant","label","placeholder","margin","fullWidth","React","Component","theme","createMuiTheme","palette","primary","main","typography","fontSize","fontFamily","badwordsArray","require","push","Search","event","setState","target","innerText","state","trim","axios","then","result","singleWords","i","data","length","includes","indexOf","getRandomWord","randomWord","randomWords","Math","floor","random","handleSubmit","a","preventDefault","method","url","topics","max","generatedWords","map","content","id","JSON","stringify","score","disabled","toLowerCase","safi","setGeneratedWords","rel_bga","functionalWords","setFunctionalWords","changePage","alert","action","onSubmit","borderColor","type","onClick","Landing","src","imgPath","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Modal","hideModal","hide","e","bindInputAuthor","inputAuthor","bindInputTitle","inputTitle","animationEnd","showModal","savePoemClick","sortedList","dataObjToFirebase","title","author","poem","database","ref","show","whichModal","onAnimationEnd","imgInstruct","imgIllustrations","size","GeneratedWord","handleClick","generatedWordClick","key","sortList","list","slice","sort","first","second","order","ListElement","item","GameBoard","modalShowBoolean","modal","reorderList","sourceIndex","destinationIndex","wordObject","wordOrder","newList","disableWord","saveToGalleryClick","modalToShow","clearPoem","enableAllWords","poemString","join","savePoem","items","direction","maxItems","render","onDragEnd","TwitterShareButton","icon","faTwitter","Gallery","showMoreLessClick","number","poemsToShow","firebaseDataObject","on","val","Object","values","reverse","index","keys","wordObj","document","querySelector","App","getUniqueWords","words","uniqueWords","keyExists","j","filter","targetPage","currentPage","htmlFor","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.12b6979e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default class InputAutocomplete extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    \r\n\r\nrender() {\r\n    return (\r\n    <div>\r\n        <Autocomplete className=\"test\"\r\n        value={this.props.userInput}\r\n        onChange={this.props.onAutoCompleteItemSelected}\r\n            options={this.props.autoCompleteWords}\r\n            // Choosing the randomize option gives us a string instead of an object with word and score\r\n            //When there is no word property, just use the option itself (null coalescing)\r\n            getOptionLabel={option => option.word ?? option}\r\n            renderInput={params => (\r\n                <TextField\r\n                {...params}\r\n                \r\n                onChange={this.props.onTextChange}\r\n                variant=\"outlined\"\r\n                label=\"Type in a word\"\r\n                placeholder=\"\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        )}\r\n        />\r\n    </div>\r\n    );\r\n}\r\n}\r\n","import React, { Component } from 'react';\r\nimport InputAutocomplete from './InputAutocomplete.js' \r\nimport axios from 'axios'\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#1A4542',\r\n        },\r\n    },\r\n    typography: {\r\n        fontSize: 28,\r\n        fontFamily: 'Kanit, Helvetica Neue Helvetica, Arial', \r\n    },\r\n});\r\n\r\nlet badwordsArray = require('badwords/array');\r\nbadwordsArray.push(\"fuckup\", \"bitchy\", \"bitchery\", \"bitchiness\", \"bitched\", \"bitchen\",\"bitchily\",\"bitchier\",\"bitchiest\", \"shittah\", \"shittim\", \"shitfaced\", \"shittle\", \"nigget\", \"niggerhead\", \"niggerheads\", \"niggerling\", \"nigged\", \"niggery\", \"niggle\",\"niggardly\",\"niggling\",\"niggard\",\"niggly\",\"niggler\",\"niggardliness\",\"niggish\", \"faggy\", \"fagged\", \"faggots\", \"faggoty\", \"faggotry\", \"faggoting\", \"faggoted\", \"cunty\", \"cunted\", \"cunting\",\"cummingtonite\", \"wetback\",\"wetbacks\", \"spunk\", \"whoremonger\", \"whoring\", \"whorehouse\", \"hooker\", \"whoredom\",\"whoremaster\",\"whoremasters\",\"whoremasterly\",\"whored\", \"whores\", \"porn\", \"pornography\", \"slutty\", \"sluttish\", \"sluttery\", \"sluttishness\", \"sluttishly\", \"fucked-up\")\r\n\r\n\r\nexport class Search extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            userInput: \"\",\r\n            autoCompleteWords: [],\r\n            randomWords: [\"Kitten\", \"Tacos\", \"Hockey\", \"Monkey\", \"Muffin\", \"Boomer\"]\r\n        }\r\n    }\r\n\r\n    // When the user uses the arrow keys or a mouse to select items\r\n    // from the autocomplete dropdown, onChange is not fired for the \r\n    // text input. Instead, we have to listen to onChange for the parent element.\r\n    onAutoCompleteItemSelected = (event) => this.setState({ userInput: event.target.innerText })   \r\n    \r\n    onTextChange = (event) => {\r\n        this.setState({ userInput: event.target.value });\r\n\r\n        if (this.state.userInput.trim() !== \"\") {\r\n            axios(\"https://cors-anywhere.herokuapp.com/https://api.datamuse.com/sug?s=\" + this.state.userInput)\r\n                .then(result => { //for loop to ensure only single words are suggested\r\n                    const singleWords = []\r\n                    for (let i=0; i < result.data.length; i++) {\r\n                        if (!result.data[i]['word'].includes(\" \") && badwordsArray.indexOf(result.data[i]['word']) === -1)  {\r\n                            singleWords.push(result.data[i])\r\n                        }\r\n                    }\r\n                    this.setState({ autoCompleteWords: singleWords })\r\n                });\r\n        }\r\n        else {\r\n            this.setState({\r\n                autoCompleteWords: []\r\n            })\r\n        }\r\n    }\r\n\r\n    getRandomWord = () => {\r\n        const randomWord = this.state.randomWords[Math.floor(Math.random() * this.state.randomWords.length)]\r\n        this.setState({ userInput:randomWord })\r\n    }    \r\n    \r\n    handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        let result = await axios({\r\n            method: 'GET',\r\n            url: `https://cors-anywhere.herokuapp.com/https://api.datamuse.com/words`,\r\n            params: {\r\n                topics: this.state.userInput,\r\n                max: 40\r\n            }\r\n        })\r\n        \r\n        const generatedWords = result.data.map((value) => {\r\n            return {content: value.word, id: JSON.stringify(value.score), disabled: false}\r\n        })\r\n\r\n        if (this.state.userInput.toLowerCase() === \"boomer\"){\r\n            const safi = []\r\n            for (let i = 0; i < 15; i++) {\r\n                safi.push({ content: 'Safi', id: 50000 + i, disabled: false })\r\n                safi.push({ content: 'Asaf', id: 60000 + i, disabled: false })\r\n            }\r\n            this.props.setGeneratedWords(safi)   \r\n        } else {\r\n            this.props.setGeneratedWords(generatedWords)\r\n        }\r\n        // Now get the functional words\r\n        result = await axios({\r\n            method: 'GET',\r\n            url: `https://cors-anywhere.herokuapp.com/https://api.datamuse.com/words`,\r\n            params: {\r\n                rel_bga: this.state.userInput,\r\n                max: 20\r\n            }\r\n        })\r\n\r\n        const functionalWords = result.data.map((value) => {\r\n            return { content: value.word, id: JSON.stringify(value.score), disabled: false }\r\n        })\r\n        this.props.setFunctionalWords(functionalWords)\r\n        \r\n        if (this.state.userInput.trim() !== \"\") {\r\n            this.props.changePage('gameBoard')\r\n        } else {\r\n            alert(\"You can't search for nothing!\")\r\n        }\r\n    }    \r\n\r\n    render() {\r\n        const { userInput } = this.state\r\n        return (\r\n            <>\r\n                <form action=\"\" onSubmit={this.handleSubmit}>\r\n                    <MuiThemeProvider theme={theme}>\r\n                        <InputAutocomplete onTextChange={this.onTextChange} \r\n                        autoCompleteWords={this.state.autoCompleteWords} \r\n                        onAutoCompleteItemSelected={this.onAutoCompleteItemSelected} \r\n                        userInput = {userInput} \r\n                        borderColor=\"primary\"\r\n                        />\r\n                    </MuiThemeProvider>\r\n\r\n                    <button className=\"main-button\" type=\"submit\">\r\n                        Get Started\r\n                    </button>\r\n                </form>\r\n                <button className=\"secondary-button\" \r\n                onClick={this.getRandomWord}>\r\n                    Generate Word\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n}  \r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\nimport Search from './Search.js'\r\nimport imgPath from '../assets/illustrations--landing.png'\r\nimport '../styles/landing.scss'\r\n\r\nclass Landing extends Component {\r\n    render() {\r\n        const { changePage, setGeneratedWords, setFunctionalWords } = this.props\r\n        return(\r\n            <>\r\n                <div className=\"landing__illustration\">\r\n                    <img src={imgPath} className=\"illustration__img\" alt=\"illustration of a person moving one post-it from a board of 18 other post-its\"/>\r\n                </div>\r\n                <div className=\"landing__opt-in\">\r\n                    <h1 className=\"main-header\">Recreate the IRL fun of magnetic poetry</h1>\r\n                    <div className=\"opt-in__form\">\r\n                        <p className=\"main-paragraph\">Give us your own prompt to kick things off or let us generate a word for you.</p>\r\n                        <Search changePage={changePage}\r\n                            setGeneratedWords={setGeneratedWords} setFunctionalWords={setFunctionalWords}/>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Landing","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyDoTP0Xz-PygNrXuRREHvJvOIdOk1kEbVI\",\r\n    authDomain: \"fridgemagnetpoems.firebaseapp.com\",\r\n    databaseURL: \"https://fridgemagnetpoems.firebaseio.com\",\r\n    projectId: \"fridgemagnetpoems\",\r\n    storageBucket: \"fridgemagnetpoems.appspot.com\",\r\n    messagingSenderId: \"17676352973\",\r\n    appId: \"1:17676352973:web:bb2f5253a5a36717a11884\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase","import React, { Component } from 'react';\r\nimport '../styles/modals.scss'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport imgInstruct from '../assets/illustrations--instruct.png'\r\nimport imgIllustrations from '../assets/illustrations--save.png'\r\n\r\nimport firebase from './firebase.js';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#1A4542',\r\n        },\r\n    }\r\n});\r\n\r\nclass Modal extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            hide : false,\r\n            inputTitle: '',\r\n            inputAuthor: ''\r\n        }\r\n    }\r\n\r\n    hideModal = () => this.setState({hide: true})\r\n    handleSubmit = (e) => e.preventDefault()\r\n    bindInputAuthor = (e) => this.setState({inputAuthor: e.target.value})\r\n    bindInputTitle = (e) => this.setState({inputTitle: e.target.value})\r\n\r\n    animationEnd = () => {\r\n        this.state.hide && this.props.showModal(false)\r\n        this.setState({ hide: false })\r\n    }\r\n    \r\n    savePoemClick = () => {\r\n        const { sortedList } = this.props\r\n        const { inputTitle, inputAuthor } = this.state\r\n        const maxWordsInPoem = 20 // placeholder number for now\r\n\r\n        if (sortedList.length <= maxWordsInPoem && sortedList.length > 5) {\r\n            const dbRef = firebase.database().ref()\r\n            const dataObjToFirebase = {\r\n                title: inputTitle,\r\n                author: inputAuthor,\r\n                poem: sortedList\r\n            }\r\n            dbRef.push(dataObjToFirebase)\r\n        // 2nd level error handling:\r\n        } else if (sortedList.length < 6) {\r\n            alert(\"You need more than 5 words in your poem.\")\r\n        } else if (sortedList.length > maxWordsInPoem ) {\r\n            alert(`Your poem is too long! Nothing longer than ${maxWordsInPoem} please.`)\r\n        } else {\r\n            alert(\"Safi, please stop bringing my shit again.\")\r\n        }\r\n        this.hideModal()\r\n    }\r\n\r\n    render() {\r\n        const { show, whichModal } = this.props\r\n        const { hide, inputAuthor, inputTitle } = this.state\r\n        return (\r\n            <div onAnimationEnd={() => this.animationEnd()}\r\n            className={`container__modal ${hide ? \"slideLeft\" : \"\"} ${show ? \"slideRight\" : \"\"}`}>\r\n\r\n                {   // check prop to see which modal to show:\r\n                whichModal === \"start\" && // START modal:  \r\n                    <div className=\"modal__instructions\">\r\n                        <div className=\"instructions__illustration\">\r\n                            <img src={imgInstruct} className=\"illustration__img\" alt=\"illustration of a person deep in thought\"/>\r\n                        </div>\r\n                        <div className=\"instructions__copy\">\r\n                            <h2 className=\"main-header\">How it works</h2>\r\n                            <p className=\"main-paragraph\">We've generated a bunch of words for you on the left. Simply drag and drop them into your canvas on the right!</p>\r\n                        </div>\r\n                        <button \r\n                        className=\"main-button\"\r\n                        onClick={this.hideModal}>Start</button>\r\n                        {/* Class was start_btn before, incase I broke anything */}\r\n                    </div>\r\n                }\r\n\r\n                {   // check prop to see which modal to show:\r\n                    whichModal === \"share\" && // SHARE modal: \r\n                    <div className=\"app__container__modal__modalInner modalShare\">\r\n                        <div className=\"share__illustration\">\r\n                            <img src={imgIllustrations} className=\"share__img\" alt=\"illustration of a person sharing ideas to the digital cloud\"/>\r\n                        </div>\r\n                        <h2>Share your poem</h2>\r\n                        <form className=\"share_inputs\" action=\"\" onSubmit={this.handleSubmit}>\r\n                            <MuiThemeProvider theme={theme}>\r\n                                <TextField \r\n                                className=\"share_title\"\r\n                                variant=\"outlined\"\r\n                                label=\"Title\"\r\n                                placeholder=\"\"\r\n                                margin=\"normal\"\r\n                                // helperText=\"Name your masterpiece\"\r\n                                size=\"small\"\r\n                                id=\"poemTitle\"\r\n                                value={inputTitle}\r\n                                onChange={this.bindInputTitle}\r\n                                />\r\n                                <TextField \r\n                                className=\"share_author\"\r\n                                variant=\"outlined\"\r\n                                label=\"Author\"\r\n                                placeholder=\"\"\r\n                                margin=\"normal\"\r\n                                // helperText=\"sign your masterpiece\"\r\n                                size=\"small\"\r\n                                id=\"poemAuthor\"\r\n                                value={inputAuthor}\r\n                                onChange={this.bindInputAuthor}\r\n                                />\r\n                            </MuiThemeProvider>\r\n                            <button className=\"gallery_btn\" onClick={this.savePoemClick}>\r\n                                Submit\r\n                            </button>\r\n                            <button className=\"share_btn\" onClick={this.hideModal}>\r\n                                Cancel\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                    }\r\n                </div>\r\n        )\r\n    }\r\n\r\n}\r\n                \r\nexport default Modal;","import React, { Component } from 'react';\r\n\r\nclass GeneratedWord extends Component {\r\n    handleClick = (e) => this.props.generatedWordClick(this.props.word)\r\n\r\n    render() {\r\n        const { id, disabled, content } = this.props.word\r\n        return (\r\n            <button key={id} id={id}\r\n            className={\"generated__item\" + (disabled ? \" disabled\" : \"\")}\r\n            disabled={disabled}\r\n            onClick={this.handleClick}>\r\n                {content}\r\n            </button>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GeneratedWord","import React, { Component } from 'react';\r\nimport Modal from './Modal.js'\r\nimport GeneratedWord from './GeneratedWord.js'\r\nimport { ListManager } from 'react-beautiful-dnd-grid';\r\nimport { TwitterShareButton } from \"react-share\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport '../styles/gameBoard.scss';\r\n\r\nconst sortList = (list) => list.slice().sort((first, second) => first.order - second.order)\r\n// draggable items generated by beautiful-dnd-grid:\r\nconst ListElement = ({ item: { content } }) => \r\n    <div className=\"generated__item\">{content}</div>\r\n\r\nclass GameBoard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            modal: true,\r\n            modalToShow: 'start',\r\n            sortedList: [],\r\n            wordOrder: 0,\r\n        }\r\n        \r\n    }\r\n\r\n    showModal = (modalShowBoolean) => this.setState({ modal: modalShowBoolean })\r\n    sortList = () => this.setState({ sortedList: sortList(this.state.sortedList) })\r\n    \r\n    reorderList = (sourceIndex, destinationIndex) => {\r\n        if (destinationIndex === sourceIndex) {\r\n            return;\r\n        }\r\n        const list = this.state.sortedList;\r\n        if (destinationIndex === 0) {\r\n            list[sourceIndex].order = list[0].order - 1;\r\n            this.sortList();\r\n            return;\r\n        }\r\n        if (destinationIndex === list.length - 1) {\r\n            list[sourceIndex].order = list[list.length - 1].order + 1;\r\n            this.sortList();\r\n            return;\r\n        }\r\n        if (destinationIndex < sourceIndex) {\r\n            list[sourceIndex].order = (list[destinationIndex].order + list[destinationIndex - 1].order) / 2;\r\n            this.sortList();\r\n            return;\r\n        }\r\n        list[sourceIndex].order = (list[destinationIndex].order + list[destinationIndex + 1].order) / 2;\r\n        this.sortList();\r\n    }\r\n    \r\n    generatedWordClick = (wordObject) => {\r\n        const { sortedList, wordOrder } = this.state\r\n        const { id, content } = wordObject\r\n        const newList = [...sortedList]\r\n\r\n        newList.push({\r\n            id: id, \r\n            order: wordOrder, \r\n            content: content\r\n        });\r\n\r\n        this.props.disableWord(wordObject.id)\r\n        this.setState({\r\n            sortedList: sortList(newList),\r\n            wordOrder: wordOrder + 1\r\n        })\r\n    }\r\n\r\n    saveToGalleryClick = () => {\r\n        const { sortedList } = this.state\r\n        const maxWordsInPoem = 20 // placeholder number for now\r\n\r\n        if (sortedList.length <= maxWordsInPoem && sortedList.length > 5) {\r\n            this.setState({ modalToShow: \"share\" })\r\n            this.showModal(true)\r\n        // 1st level error handling:\r\n        } else if (sortedList.length < 6) {\r\n            alert(\"You need more than 5 words in your poem.\")\r\n        } else if (sortedList.length > maxWordsInPoem ) {\r\n            alert(`Your poem is too long! Nothing longer than ${maxWordsInPoem} please.`)\r\n        } else {\r\n            alert(\"Safi, please stop bringing my shit again.\")\r\n        }\r\n    }\r\n\r\n    clearPoem = () => {\r\n        this.setState({\r\n            sortedList: [],\r\n            wordOrder: 0\r\n        })\r\n        // remove disabled and disabled style from words: \r\n        this.props.enableAllWords();\r\n    }\r\n\r\n    poemString = () => {\r\n        const rawWords = this.state.sortedList.map(wordObject => wordObject.content)\r\n        return rawWords.join(' ')\r\n    }\r\n\r\n    savePoem = () => {\r\n        const { sortedList } = this.state // destructuring state for clean code\r\n        const maxWordsInPoem = 10 // placeholder number for now\r\n        if (sortedList.length <= maxWordsInPoem && sortedList.length > 2) {\r\n            const dbRef = this.database().ref()\r\n            // This was called on 'firedbase' but I'm being told it's undefined\r\n            dbRef.push(sortedList)\r\n        // error handling:\r\n        } else if (sortedList.length < 3) {\r\n            alert('You need more than 2 words in your poem.')\r\n        } else if (sortedList.length > maxWordsInPoem ) {\r\n            alert(`Your poem is too long! Nothing longer than ${maxWordsInPoem} please.`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { sortedList, modal, modalToShow, wordOrder } = this.state\r\n        const { generatedWords, functionalWords } = this.props\r\n        return(\r\n            <>\r\n                <Modal show={modal} showModal={this.showModal} \r\n                whichModal={modalToShow} changePage={this.props.changePage} \r\n                sortedList={sortedList} />\r\n                <div className=\"container__game-board\">\r\n                    <div className=\"game-board__generated\">\r\n                        <div className=\"generated__themed\">\r\n                            <p>One use:</p>\r\n                            {\r\n                            generatedWords.map((word) => {\r\n                                return(\r\n                                    <GeneratedWord key={word.id} word={word} \r\n                                    generatedWordClick={this.generatedWordClick} />\r\n                                )\r\n                            })\r\n                            }\r\n                        </div>\r\n                        <div className=\"generate__function\">\r\n                            <p>Multiple uses:</p>\r\n                            {\r\n                            functionalWords.map((word) => {\r\n                                return(\r\n                                    <GeneratedWord key={word.id} word={word} \r\n                                    generatedWordClick={this.generatedWordClick} />\r\n                                )\r\n                            })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sandbox__container\">\r\n                        <h2 className=\"main-header\">Create a 6 - 20 words poem:</h2>\r\n                        <p>{wordOrder} / 20</p>\r\n                        <div className=\"game-board__sandbox\">\r\n                            <div className=\"sandbox__droppable\">\r\n                                <ListManager\r\n                                    items={sortedList}\r\n                                    direction=\"horizontal\"\r\n                                    maxItems={5} // change this mediaQs\r\n                                    render={(item) => <ListElement item={item} />}\r\n                                    onDragEnd={this.reorderList} \r\n                                />\r\n                            </div>\r\n                            <div className=\"sandbox__buttons\">\r\n                                <button className=\"secondary-button\" onClick={this.clearPoem}>Clear</button>\r\n                                <button className=\"main-button\" onClick={this.saveToGalleryClick}>\r\n                                    Save\r\n                                </button>\r\n                                <TwitterShareButton url=\"https://bit.ly/2yHFNdM\"\r\n                                title={`Check out my magnet poem!\\n\"${this.poemString()}\"\\nCreate your own @`} >\r\n                                        Share <FontAwesomeIcon icon={faTwitter}/>\r\n                                </TwitterShareButton>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport '../styles/gallery.scss';\r\n\r\nclass Gallery extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            firebaseDataObject: [],\r\n            poemsToShow: 6\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // get data from FB, save it to state\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on( 'value', (result) => this.setState({ firebaseDataObject: result.val() }) )\r\n    }\r\n\r\n    showMoreLessClick = (number) => this.setState({ poemsToShow: this.state.poemsToShow + number })\r\n\r\n    render() { \r\n        const { firebaseDataObject, poemsToShow } = this.state\r\n        const { changePage } = this.props\r\n        return (\r\n            <div className=\"app__container__gallery\">\r\n                <h1>Verse By Magnet Poets</h1>\r\n                <div className=\"app__container__gallery__grid\">\r\n                    {/* map over array from firebase. slice to control how many results to show */\r\n                    Object.values(firebaseDataObject).reverse().slice(0, poemsToShow).map(({ title, author, poem }, index) => {\r\n                        return(\r\n                            <div key={Object.keys(firebaseDataObject)[index]}\r\n                            className=\"app__container__gallery__grid__poem\">\r\n                                <h2>{title}</h2>\r\n                                <p>by: {author}</p>\r\n                                {\r\n                                poem.map((wordObj) => {\r\n                                    return( // fix below class name. just need temp styling for now\r\n                                        <div key={wordObj.order} \r\n                                        className=\"app__container__gallery__grid__poem__word\">\r\n                                            {wordObj.content}\r\n                                        </div>\r\n                                    ) \r\n                                })\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                    }\r\n                </div>\r\n                <div className=\"app__container__gallery__buttons\">    \r\n                    <button onClick={() =>this.showMoreLessClick(-10)}\r\n                    className=\"secondary-button\">Less</button>\r\n                    <button onClick={() =>this.showMoreLessClick(10)}\r\n                    className=\"secondary-button\">More</button>\r\n                    <button onClick={() => changePage('landing')}\r\n                    className=\"main-button\">Home</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gallery;","import React, { Component } from 'react';\r\nimport Landing from './components/Landing.js';\r\nimport GameBoard from './components/GameBoard'\r\nimport Gallery from './components/Gallery.js';\r\n\r\nimport './styles/styles.scss';\r\n\r\n// Prevents Auto-Zoom Behaviour with Forms on Mobile\r\nconst viewportMeta = document.querySelector('meta[name=\"viewport\"]');\r\nviewportMeta.content = 'user-scalable=NO, width=device-width, initial-scale=1.0';\r\n\r\n/******** set poem max length at GameBoard.js ln 72 ********/\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            currentPage : 'landing',\r\n            generatedWords: [],\r\n            functionalWords: []\r\n        }\r\n    }\r\n    //Make sure no words have the same ID\r\n    getUniqueWords = (words) => {\r\n        let uniqueWords = []\r\n        for (let i = 0; i < words.length; i++) {\r\n            let keyExists = false;\r\n            let word = words[i];\r\n\r\n            for(let j = 0; j < uniqueWords.length; j++) {\r\n                if (word.id == uniqueWords[j].id) {\r\n                    keyExists = true;\r\n                }\r\n            }\r\n            !keyExists && uniqueWords.push(word)\r\n        }\r\n        return uniqueWords\r\n    }\r\n\r\n    enableAllWords = () => { \r\n        // Set \"disabled\" to false for all generated word\r\n        let generatedWords = this.state.generatedWords.map(word => {\r\n            word.disabled = false;\r\n            return word;\r\n        })\r\n        this.setState({ generatedWords: generatedWords })\r\n    }\r\n\r\n    disableWord = (id) => {\r\n        // Given the ID of a word, disable only that word        \r\n        let generatedWords = this.state.generatedWords.map(word => {\r\n            if(word.id === id) {\r\n                word.disabled = true;\r\n            }\r\n            return word;\r\n        })\r\n        this.setState({ generatedWords: generatedWords })\r\n    }\r\n    //Words generated based on query saved to state \r\n    setGeneratedWords = (generatedWords) => {\r\n        generatedWords = generatedWords.filter(word => word.content.indexOf(' ') === -1)\r\n\r\n        let uniqueWords = this.getUniqueWords(generatedWords);\r\n        this.setState({ generatedWords: uniqueWords })\r\n    }\r\n    //Functional words generated based on query saved to state\r\n    setFunctionalWords = (functionalWords) => {\r\n        functionalWords = functionalWords.filter(word => word.content.indexOf(' ') === -1)\r\n\r\n        let uniqueWords = this.getUniqueWords(functionalWords);\r\n        this.setState({ functionalWords: uniqueWords })\r\n    }\r\n\r\n    changePage = (targetPage) => this.setState({ currentPage: targetPage })\r\n\r\n    render() {\r\n        const { currentPage, generatedWords, functionalWords } = this.state\r\n        return (\r\n            <div className=\"app wrapper\">\r\n                <nav className=\"app__nav\">\r\n                    <ul>\r\n                        <li className=\"nav__branding\"\r\n                        onClick={() => this.changePage('landing')}>\r\n                            Fridge Verses\r\n                        </li>\r\n                        \r\n                        <li className=\"nav__link nav__link--desktop\" \r\n                        onClick={() => this.changePage('gallery')}>\r\n                            Gallery\r\n                        </li>\r\n\r\n                        <li className=\"nav__link nav__link--mobile\">\r\n                            <input type=\"checkbox\" id=\"menu-trigger\"/>\r\n                            <label className=\"hamburger\" htmlFor=\"menu-trigger\">\r\n                                <div className=\"hamburger__line hamburger__line--top\"></div>\r\n                                <div className=\"hamburger__line hamburger__line--bottom\"></div>\r\n                            </label>\r\n\r\n                            <div className=\"nav__mobile\">\r\n                                <ul className=\"mobile__links\">\r\n                                    <li>Gallery</li>\r\n                                </ul>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <main className=\"app__container\">\r\n                    {/* && basically shorthand if statement */}\r\n                    { currentPage === 'landing' &&\r\n                        <Landing changePage={this.changePage} \r\n                        setGeneratedWords={this.setGeneratedWords} \r\n                        setFunctionalWords={this.setFunctionalWords} />}\r\n                    {currentPage === 'gameBoard' &&\r\n                        <GameBoard changePage={this.changePage}\r\n                        generatedWords={generatedWords} functionalWords={functionalWords} enableAllWords={this.enableAllWords}\r\n                        disableWord={this.disableWord}/>}\r\n                    {currentPage === 'gallery' &&\r\n                        <Gallery changePage={this.changePage} />}\r\n                </main>\r\n                <footer className=\"app__footer\">\r\n                    <div className=\"footer__social\">\r\n                        <i className=\"fab fa-github\"></i>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/illustrations--landing.53f28855.png\";","module.exports = __webpack_public_path__ + \"static/media/illustrations--instruct.dff84eab.png\";","module.exports = __webpack_public_path__ + \"static/media/illustrations--save.783bf5a5.png\";"],"sourceRoot":""}