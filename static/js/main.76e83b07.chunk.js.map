{"version":3,"sources":["components/InputAutocomplete.js","components/Search.js","components/Landing.js","components/firebase.js","components/Modal.js","components/GeneratedWord.js","components/GameBoard.js","components/Gallery.js","App.js","serviceWorker.js","index.js","assets/illustrations--landing.png","assets/illustrations--instruct.png","assets/illustrations--save.png"],"names":["InputAutocomplete","props","Autocomplete","className","value","this","userInput","onChange","onAutoCompleteItemSelected","options","autoCompleteWords","getOptionLabel","option","word","renderInput","params","TextField","onTextChange","variant","label","placeholder","margin","fullWidth","React","Component","theme","createMuiTheme","palette","primary","main","badwordsArray","require","push","Search","event","setState","target","innerText","state","trim","axios","then","result","singleWords","i","data","length","includes","indexOf","getRandomWord","randomWord","randomWords","Math","floor","random","handleSubmit","a","preventDefault","method","url","topics","max","generatedWords","map","content","id","JSON","stringify","score","disabled","setGeneratedWords","rel_bga","functionalWords","setFunctionalWords","changePage","action","onSubmit","borderColor","type","onClick","Landing","src","imgPath","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Modal","hideModal","hide","e","bindInputAuthor","inputAuthor","bindInputTitle","inputTitle","animationEnd","showModal","savePoemClick","sortedList","dataObjToFirebase","title","author","poem","database","ref","alert","show","whichModal","onAnimationEnd","imgInstruct","imgIllustrations","helperText","GeneratedWord","handleClick","generatedWordClick","key","sortList","list","slice","sort","first","second","order","ListElement","item","GameBoard","modalShowBoolean","modal","reorderList","sourceIndex","destinationIndex","wordObject","wordOrder","newList","filter","disableWord","saveToGalleryClick","modalToShow","clearPoem","enableAllWords","poemString","join","items","direction","maxItems","render","onDragEnd","TwitterShareButton","icon","faTwitter","Gallery","goHome","on","val","App","getUniqueWords","words","uniqueWords","keyExists","j","targetPage","currentPage","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uUAIqBA,E,kDACjB,WAAYC,GAAQ,uCACVA,G,qDAKJ,IAAD,OACL,OACA,6BACI,kBAACC,EAAA,EAAD,CAAcC,UAAU,OACxBC,MAAOC,KAAKJ,MAAMK,UAClBC,SAAUF,KAAKJ,MAAMO,2BACjBC,QAASJ,KAAKJ,MAAMS,kBAGpBC,eAAgB,SAAAC,GAAM,uBAAIA,EAAOC,YAAX,QAAmBD,GACzCE,YAAa,SAAAC,GAAM,OACf,kBAACC,EAAA,EAAD,iBACID,EADJ,CAGAR,SAAU,EAAKN,MAAMgB,aACrBC,QAAQ,WACRC,MAAM,iBACNC,YAAY,GACZC,OAAO,SACPC,WAAS,a,GA1BsBC,IAAMC,W,mCCC/CC,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,cAKdC,EAAgBC,EAAQ,KAC5BD,EAAcE,KAAK,SAAU,SAAU,WAAY,aAAc,UAAW,UAAU,WAAW,WAAW,YAAa,UAAW,UAAW,YAAa,UAAW,SAAU,aAAc,cAAe,aAAc,SAAU,UAAW,SAAS,YAAY,WAAW,UAAU,SAAS,UAAU,gBAAgB,UAAW,QAAS,SAAU,UAAW,UAAW,WAAY,YAAa,WAAY,QAAS,SAAU,UAAU,gBAAiB,UAAU,WAAY,QAAS,cAAe,UAAW,aAAc,SAAU,WAAW,cAAc,eAAe,gBAAgB,SAAU,SAAU,OAAQ,cAAe,SAAU,WAAY,WAAY,eAAgB,aAAc,aAGlrB,IAmHQC,EAnHf,kDACI,aAAe,IAAD,8BACV,gBAQJzB,2BAA6B,SAAC0B,GAI1B,EAAKC,SAAS,CACV7B,UAAW4B,EAAME,OAAOC,aAdlB,EAkBdpB,aAAe,SAACiB,GAEZ,EAAKC,SAAS,CACV7B,UAAW4B,EAAME,OAAOhC,QAGQ,KAAhC,EAAKkC,MAAMhC,UAAUiC,OACrBC,IAAM,kCAAoC,EAAKF,MAAMhC,WAChDmC,MAAK,SAAAC,GAGF,IADA,IAAIC,EAAc,GACTC,EAAE,EAAGA,EAAIF,EAAOG,KAAKC,OAAQF,IAC7BF,EAAOG,KAAKD,GAAZ,KAAuBG,SAAS,OAA2D,IAAnDjB,EAAckB,QAAQN,EAAOG,KAAKD,GAAZ,OAC/DD,EAAYX,KAAKU,EAAOG,KAAKD,IAIrC,EAAKT,SAAS,CACVzB,kBAAmBiC,OAK/B,EAAKR,SAAS,CACVzB,kBAAmB,MA1CjB,EA+CduC,cAAgB,WACZ,IAAIC,EAAa,EAAKZ,MAAMa,YAAYC,KAAKC,MAAMD,KAAKE,SAAW,EAAKhB,MAAMa,YAAYL,SAC1F,EAAKX,SAAS,CAAC7B,UAAU4C,KAjDf,EAoDdK,aApDc,uCAoDC,WAAOrB,GAAP,mBAAAsB,EAAA,6DACXtB,EAAMuB,iBADK,SAGQjB,IAAM,CACrBkB,OAAQ,MACRC,IAAI,iCACJ5C,OAAQ,CACJ6C,OAAQ,EAAKtB,MAAMhC,UACnBuD,IAAK,MARF,cAGPnB,EAHO,OAYLoB,EAAiBpB,EAAOG,KAAKkB,KAAI,SAAC3D,GACpC,MAAO,CAAC4D,QAAS5D,EAAMS,KAAMoD,GAAIC,KAAKC,UAAU/D,EAAMgE,OAAQC,UAAU,MAG5E,EAAKpE,MAAMqE,kBAAkBR,GAhBlB,SAmBItB,IAAM,CACjBkB,OAAQ,MACRC,IAAI,iCACJ5C,OAAQ,CACJwD,QAAS,EAAKjC,MAAMhC,UACpBuD,IAAK,MAxBF,OAmBXnB,EAnBW,OA4BL8B,EAAkB9B,EAAOG,KAAKkB,KAAI,SAAC3D,GACrC,MAAO,CAAE4D,QAAS5D,EAAMS,KAAMoD,GAAIC,KAAKC,UAAU/D,EAAMgE,WAG3D,EAAKnE,MAAMwE,mBAAmBD,GAC9B,EAAKvE,MAAMyE,WAAW,aAjCX,4CApDD,sDAEV,EAAKpC,MAAQ,CACThC,UAAW,GACXI,kBAAmB,GACnByC,YAAa,CAAC,SAAU,QAAS,SAAU,SAAU,WAL/C,EADlB,qDAyFc,IACE7C,EAAcD,KAAKiC,MAAnBhC,UACR,OACI,oCACI,0BAAMqE,OAAO,GAAGC,SAAUvE,KAAKkD,cAC3B,kBAAC,IAAD,CAAkB9B,MAAOA,GAErB,kBAAC,EAAD,CAAmBR,aAAcZ,KAAKY,aAAcP,kBAAmBL,KAAKiC,MAAM5B,kBAAmBF,2BAA4BH,KAAKG,2BACtIF,UAAaA,EACbuE,YAAY,aAIhB,4BAAQ1E,UAAU,cAAc2E,KAAK,UAArC,uBAIJ,4BAAQ3E,UAAU,mBAClB4E,QAAS1E,KAAK4C,eADd,6BA1GhB,GAA4BzB,a,iBCcbwD,E,kDA1BX,aAAe,IAAD,8BACV,gBACK1C,MAAQ,GAFH,E,qDAQV,OACI,oCACI,yBAAKnC,UAAU,+BACX,wBAAIA,UAAU,eAAd,2CACA,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAQuE,WAAYrE,KAAKJ,MAAMyE,WAC3BJ,kBAAmBjE,KAAKJ,MAAMqE,kBAAmBG,mBAAoBpE,KAAKJ,MAAMwE,qBACpF,uBAAGtE,UAAU,kBAAb,mFAGR,yBAAKA,UAAU,gCACX,yBAAK8E,IAAKC,IAASC,IAAI,wF,GApBrB3D,a,2ECSpB4D,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,cACnBC,MAAO,6CAKMR,QAAf,ECPI3D,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,cAyHHgE,E,kDAnHX,aAAe,IAAD,8BACV,gBAQJC,UAAY,kBAAM,EAAK3D,SAAS,CAAC4D,MAAM,KATzB,EAUdxC,aAAe,SAACyC,GAAD,OAAOA,EAAEvC,kBAVV,EAWdwC,gBAAkB,SAACD,GAAD,OAAO,EAAK7D,SAAS,CAAC+D,YAAaF,EAAE5D,OAAOhC,SAXhD,EAYd+F,eAAiB,SAACH,GAAD,OAAO,EAAK7D,SAAS,CAACiE,WAAYJ,EAAE5D,OAAOhC,SAZ9C,EAcdiG,aAAe,SAACL,GACR,EAAK1D,MAAMyD,MACf,EAAK9F,MAAMqG,WAAU,GAErB,EAAKnE,SAAS,CAAC4D,MAAM,KAlBX,EAqBdQ,cAAgB,WAAO,IACXC,EAAe,EAAKvG,MAApBuG,WADU,EAEkB,EAAKlE,MAAjC8D,EAFU,EAEVA,WAAYF,EAFF,EAEEA,YAEpB,GAAIM,EAAW1D,QADQ,IACoB0D,EAAW1D,OAAS,EAAG,CAC9D,IACM2D,EAAoB,CACtBC,MAAON,EACPO,OAAQT,EACRU,KAAMJ,GAJIpB,EAASyB,WAAWC,MAM5B9E,KAAKyE,QAEJ,EAAKnE,MAAMkE,WAAW1D,OAAS,EACtCiE,MAAM,4CACCP,EAAW1D,OAZC,GAanBiE,MAAM,8CAAD,OAbc,GAad,aAELA,MAAM,6CAEV,EAAKjB,aAvCL,EAAKxD,MAAQ,CACTyD,MAAO,EACPK,WAAY,GACZF,YAAa,IALP,E,qDA4CJ,IAAD,aACwB7F,KAAKJ,MAA1B+G,EADH,EACGA,KAAMC,EADT,EACSA,WADT,EAEqC5G,KAAKiC,MAAvCyD,EAFH,EAEGA,KAAMG,EAFT,EAESA,YAAaE,EAFtB,EAEsBA,WAC3B,OACI,yBACAjG,UAAS,kDACH4F,EAAO,YAAc,GADlB,8BAEHiB,EAAO,aAAe,IAC5BE,eAAgB,SAAClB,GAAD,OAAO,EAAKK,aAAaL,KAElB,UAAfiB,GACA,yBAAK9G,UAAU,gDACX,yBAAK8E,IAAKkC,IAAahC,IAAI,6CAC3B,4CACA,6IACA,4BACAhF,UAAU,YACV4E,QAAS1E,KAAKyF,WAFd,SAE+B,gDAIpB,UAAfmB,GACA,yBAAK9G,UAAU,gDACX,yBAAK8E,IAAKmC,IAAkBjC,IAAI,gEAChC,+CACA,0BAAMhF,UAAU,eAAewE,OAAO,GAAGC,SAAUvE,KAAKkD,cACpD,kBAAC,IAAD,CAAkB9B,MAAOA,GACrB,kBAACT,EAAA,GAAD,GACAb,UAAU,cACVe,QAAQ,WACRC,MAAM,QACNC,YAAY,GACZC,OAAO,SACPgG,WAAW,yBANX,uBAOO,UAPP,qBAQK,SARL,mBASG,aATH,sBAUOjB,GAVP,yBAWU/F,KAAK8F,gBAXf,IAaA,kBAACnF,EAAA,GAAD,GACAb,UAAU,eACVe,QAAQ,WACRC,MAAM,SACNC,YAAY,GACZC,OAAO,SACPwD,YAAY,UACZwC,WAAW,yBAPX,uBAQO,UARP,qBASK,SATL,mBAUG,cAVH,sBAWOnB,GAXP,yBAYU7F,KAAK4F,iBAZf,KAeJ,4BAAQ9F,UAAU,cAClB4E,QAAS1E,KAAKkG,eADd,UAIA,4BAAQpG,UAAU,YAClB4E,QAAS1E,KAAKyF,WADd,iB,GAxGRtE,aCUL8F,E,kDAtBX,aAAe,IAAD,8BACV,gBAGJC,YAAc,SAACvB,GACX,EAAK/F,MAAMuH,mBAAmB,EAAKvH,MAAMY,OAL/B,E,qDAUV,OACI,4BAAQ4G,IAAKpH,KAAKJ,MAAMY,KAAKoD,GAAIA,GAAI5D,KAAKJ,MAAMY,KAAKoD,GACjD9D,UAAW,8CAAgDE,KAAKJ,MAAMY,KAAKwD,SAAW,YAAc,IACpGA,SAAUhE,KAAKJ,MAAMY,KAAKwD,SAC1BU,QAAS1E,KAAKkH,aACblH,KAAKJ,MAAMY,KAAKmD,a,GAjBLxC,a,mCCMtBkG,EAAW,SAACC,GAAD,OAAUA,EAAKC,QAAQC,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAME,MAAQD,EAAOC,UAE/EC,EAAc,SAAC,GAAD,IAAWjE,EAAX,EAAGkE,KAAQlE,QAAX,OAChB,yBAAK7D,UAAU,4CAA4C6D,IAoIhDmE,E,kDAjIX,aAAe,IAAD,8BACV,gBAUJ7B,UAAY,SAAC8B,GAAD,OAAsB,EAAKjG,SAAS,CAACkG,MAAOD,KAX1C,EAYdV,SAAW,kBAAM,EAAKvF,SAAS,CAACqE,WAAYkB,EAAS,EAAKpF,MAAMkE,eAZlD,EAcd8B,YAAc,SAACC,EAAaC,GACxB,GAAIA,IAAqBD,EAAzB,CAGA,IAAMZ,EAAO,EAAKrF,MAAMkE,WACxB,GAAyB,IAArBgC,EAGA,OAFAb,EAAKY,GAAaP,MAAQL,EAAK,GAAGK,MAAQ,OAC1C,EAAKN,WAGT,GAAIc,IAAqBb,EAAK7E,OAAS,EAGnC,OAFA6E,EAAKY,GAAaP,MAAQL,EAAKA,EAAK7E,OAAS,GAAGkF,MAAQ,OACxD,EAAKN,WAGT,GAAIc,EAAmBD,EAGnB,OAFAZ,EAAKY,GAAaP,OAASL,EAAKa,GAAkBR,MAAQL,EAAKa,EAAmB,GAAGR,OAAS,OAC9F,EAAKN,WAGTC,EAAKY,GAAaP,OAASL,EAAKa,GAAkBR,MAAQL,EAAKa,EAAmB,GAAGR,OAAS,EAC9F,EAAKN,aAnCK,EAsCdF,mBAAqB,SAACiB,GAAgB,IAAD,EACC,EAAKnG,MAA/BkE,EADyB,EACzBA,WAAYkC,EADa,EACbA,UACZzE,EAAgBwE,EAAhBxE,GAAID,EAAYyE,EAAZzE,QAEN2E,EAAU,YAAInC,GAAYoC,QAAO,SAACV,GAAD,OAAUA,EAAKlE,SAAWyE,EAAWzE,WAC5E2E,EAAQ3G,KAAK,CACTiC,GAAIA,EACJ+D,MAAOU,EACP1E,QAASA,IAGb,EAAK7B,SAAS,CACVqE,WAAYkB,EAASiB,GACrBD,UAAWA,EAAY,IAG3B,EAAKzI,MAAM4I,YAAYJ,EAAWxE,KAtDxB,EAyDd6E,mBAAqB,WAAO,IAChBtC,EAAe,EAAKlE,MAApBkE,WAEJA,EAAW1D,QADQ,IACoB0D,EAAW1D,OAAS,GAC3D,EAAKX,SAAS,CAAC4G,YAAa,UAC5B,EAAKzC,WAAU,IAER,EAAKhE,MAAMkE,WAAW1D,OAAS,EACtCiE,MAAM,4CACCP,EAAW1D,OAPC,GAQnBiE,MAAM,8CAAD,OARc,GAQd,aAELA,MAAM,8CArEA,EAyEdiC,UAAY,WACR,EAAK7G,SAAS,CACVqE,WAAY,GACZkC,UAAW,IAIf,EAAKzI,MAAMgJ,kBAhFD,EAmFdC,WAAa,WAET,OADiB,EAAK5G,MAAMkE,WAAWzC,KAAI,SAAA0E,GAAU,OAAIA,EAAWzE,WACpDmF,KAAK,MAnFrB,EAAK7G,MAAQ,CACT+F,OAAO,EACPU,YAAa,QACbvC,WAAY,GACZkC,UAAW,GANL,E,qDAwFJ,IAAD,SACiDrI,KAAKiC,MAAnDkE,EADH,EACGA,WAAY6B,EADf,EACeA,MAAOU,EADtB,EACsBA,YAAaL,EADnC,EACmCA,UACxC,OACI,oCACI,kBAAC,EAAD,CAAO1B,KAAMqB,EAAO/B,UAAWjG,KAAKiG,UACpCW,WAAY8B,EAAarE,WAAYrE,KAAKJ,MAAMyE,WAChD8B,WAAYA,IACZ,yBAAKrG,UAAU,6BACX,yBAAKA,UAAU,wCACX,6CAEIE,KAAKJ,MAAM6D,eAAeC,KAAI,SAAClD,GAC3B,OACI,kBAAC,EAAD,CAAeoD,GAAIpD,EAAKoD,GAAIpD,KAAMA,EAAM2G,mBAAoB,EAAKA,yBAKjF,yBAAKrH,UAAU,sCACX,2DACA,2BAAIuI,EAAJ,SACA,kBAAC,cAAD,CACAU,MAAO5C,EACP6C,UAAU,aACVC,SAAU,EAEVC,OAAQ,SAACrB,GAAD,OAAU,kBAAC,EAAD,CAAaA,KAAMA,KACrCsB,UAAWnJ,KAAKiI,cAChB,4BAAQvD,QAAS1E,KAAK2I,WAAtB,SACA,4BAAQjE,QAAS1E,KAAKyI,oBAAtB,mBACA,kBAACW,EAAA,EAAD,CAAoB9F,IAAI,yBACxB+C,MAAK,8BAAyBrG,KAAK6I,aAA9B,uBACD,yCAAc,kBAAC,IAAD,CAAiBQ,KAAMC,e,GAzHzCnI,aCmBToI,E,4MApBXC,OAAS,a,kEANSzE,EAASyB,WAAWC,MAC5BgD,GAAG,SAAS,SAACpH,GACFA,EAAOqH,W,+BAQlB,IACErF,EAAerE,KAAKJ,MAApByE,WACR,OAEI,yBAAKvE,UAAU,2BACX,+DACA,yBAAKA,UAAU,kCAGf,0CACA,4BAAQ4E,QAAS,kBAAML,EAAW,aAAlC,a,GAvBMlD,aC+HPwI,G,yDA1HX,aAAe,IAAD,8BACV,gBAQJC,eAAiB,SAACC,GAGd,IAFA,IAAIC,EAAc,GAETvH,EAAI,EAAGA,EAAIsH,EAAMpH,OAAQF,IAAK,CAInC,IAHA,IAAIwH,GAAY,EACZvJ,EAAOqJ,EAAMtH,GAETyH,EAAI,EAAGA,EAAIF,EAAYrH,OAAQuH,IAC/BxJ,EAAKoD,IAAMkG,EAAYE,GAAGpG,KAC1BmG,GAAY,GAGfA,GACDD,EAAYnI,KAAKnB,GAIzB,OAAOsJ,GA1BG,EA6BdlB,eAAiB,WAEb,IAAInF,EAAiB,EAAKxB,MAAMwB,eAAeC,KAAI,SAAAlD,GAE/C,OADAA,EAAKwD,UAAW,EACTxD,KAGX,EAAKsB,SAAS,CACV2B,eAAgBA,KArCV,EAyCd+E,YAAc,SAAC5E,GAEX,IAAIH,EAAiB,EAAKxB,MAAMwB,eAAeC,KAAI,SAAAlD,GAM/C,OAJGA,EAAKoD,KAAOA,IACXpD,EAAKwD,UAAW,GAGbxD,KAGX,EAAKsB,SAAS,CACV2B,eAAgBA,KArDV,EAyDdQ,kBAAoB,SAACR,GAEjB,IAAIqG,EAAc,EAAKF,eAAenG,GAEtC,EAAK3B,SAAS,CACV2B,eAAgBqG,KA9DV,EAmEd1F,mBAAqB,SAACD,GAElB,IAAI2F,EAAc,EAAKF,eAAezF,GAEtC,EAAKrC,SAAS,CACVqC,gBAAiB2F,KAxEX,EA4EdzF,WAAa,SAAC4F,GAAD,OAAgB,EAAKnI,SAAS,CAACoI,YAAaD,KA1ErD,EAAKhI,MAAQ,CACbiI,YAAc,UACdzG,eAAgB,GAChBU,gBAAiB,IALP,E,qDA8EJ,IAAD,SACoDnE,KAAKiC,MAAtDiI,EADH,EACGA,YAAazG,EADhB,EACgBA,eAAgBU,EADhC,EACgCA,gBACrC,OACI,yBAAKrE,UAAU,eACX,yBAAKA,UAAU,YACX,4BACI,wBAAIA,UAAU,gBACd4E,QAAS,kBAAM,EAAKL,WAAW,aAD/B,iBAKA,wBAAIvE,UAAU,YACd4E,QAAS,kBAAM,EAAKL,WAAW,eAD/B,aAIA,wBAAIvE,UAAU,YACd4E,QAAS,kBAAM,EAAKL,WAAW,aAD/B,aAMR,yBAAKvE,UAAU,kBACM,YAAhBoK,GACG,kBAAC,EAAD,CAAS7F,WAAYrE,KAAKqE,WAC1BJ,kBAAmBjE,KAAKiE,kBAAmBG,mBAAoBpE,KAAKoE,qBACvD,cAAhB8F,GACG,kBAAC,EAAD,CAAW7F,WAAYrE,KAAKqE,WAC5BZ,eAAgBA,EAAgBU,gBAAiBA,EACjDyE,eAAgB5I,KAAK4I,eACrBJ,YAAaxI,KAAKwI,cAEL,YAAhB0B,GACG,kBAAC,EAAD,CAAS7F,WAAYrE,KAAKqE,cAElC,4BAAQvE,UAAU,eACd,oC,GAlHFqB,cCKEgJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAStB,OACP,kBAAC,IAAMuB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1I,MAAK,SAAA2I,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,qD,mBCA3CD,EAAOC,QAAU,IAA0B,kD","file":"static/js/main.76e83b07.chunk.js","sourcesContent":["import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default class InputAutocomplete extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    \r\n\r\nrender() {\r\n    return (\r\n    <div>\r\n        <Autocomplete className=\"test\"\r\n        value={this.props.userInput}\r\n        onChange={this.props.onAutoCompleteItemSelected}\r\n            options={this.props.autoCompleteWords}\r\n            // Choosing the randomize option gives us a string instead of an object with word and score\r\n            //When there is no word property, just use the option itself (null coalescing)\r\n            getOptionLabel={option => option.word ?? option}\r\n            renderInput={params => (\r\n                <TextField\r\n                {...params}\r\n                \r\n                onChange={this.props.onTextChange}\r\n                variant=\"outlined\"\r\n                label=\"Type in a word\"\r\n                placeholder=\"\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n            />\r\n        )}\r\n        />\r\n    </div>\r\n    );\r\n}\r\n}\r\n","import React, { Component } from 'react';\r\nimport InputAutocomplete from './InputAutocomplete.js' \r\nimport axios from 'axios'\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#1A4542',\r\n        },\r\n    }\r\n});\r\n\r\nlet badwordsArray = require('badwords/array');\r\nbadwordsArray.push(\"fuckup\", \"bitchy\", \"bitchery\", \"bitchiness\", \"bitched\", \"bitchen\",\"bitchily\",\"bitchier\",\"bitchiest\", \"shittah\", \"shittim\", \"shitfaced\", \"shittle\", \"nigget\", \"niggerhead\", \"niggerheads\", \"niggerling\", \"nigged\", \"niggery\", \"niggle\",\"niggardly\",\"niggling\",\"niggard\",\"niggly\",\"niggler\",\"niggardliness\",\"niggish\", \"faggy\", \"fagged\", \"faggots\", \"faggoty\", \"faggotry\", \"faggoting\", \"faggoted\", \"cunty\", \"cunted\", \"cunting\",\"cummingtonite\", \"wetback\",\"wetbacks\", \"spunk\", \"whoremonger\", \"whoring\", \"whorehouse\", \"hooker\", \"whoredom\",\"whoremaster\",\"whoremasters\",\"whoremasterly\",\"whored\", \"whores\", \"porn\", \"pornography\", \"slutty\", \"sluttish\", \"sluttery\", \"sluttishness\", \"sluttishly\", \"fucked-up\")\r\n\r\n\r\nexport class Search extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            userInput: \"\",\r\n            autoCompleteWords: [],\r\n            randomWords: [\"Kitten\", \"Tacos\", \"Hockey\", \"Monkey\", \"Muffin\"]\r\n        }\r\n    }\r\n\r\n    onAutoCompleteItemSelected = (event) => {\r\n        // When the user uses the arrow keys or a mouse to select items\r\n        // from the autocomplete dropdown, onChange is not fired for the \r\n        // text input. Instead, we have to listen to onChange for the parent element.\r\n        this.setState({\r\n            userInput: event.target.innerText\r\n        });\r\n    }   \r\n    \r\n    onTextChange = (event) => {\r\n\r\n        this.setState({\r\n            userInput: event.target.value\r\n        });\r\n\r\n        if (this.state.userInput.trim() !== \"\") {\r\n            axios(\"https://api.datamuse.com/sug?s=\" + this.state.userInput)\r\n                .then(result => {\r\n                    //for loop to ensure only single words are suggested\r\n                    let singleWords = []\r\n                    for (let i=0; i < result.data.length; i++) {\r\n                        if (!result.data[i]['word'].includes(\" \") && badwordsArray.indexOf(result.data[i]['word']) === -1)  {\r\n                            singleWords.push(result.data[i])\r\n                        }\r\n                    }\r\n\r\n                    this.setState({\r\n                        autoCompleteWords: singleWords\r\n                    })\r\n                });\r\n        }\r\n        else {\r\n            this.setState({\r\n                autoCompleteWords: []\r\n            })\r\n        }\r\n    }\r\n\r\n    getRandomWord = () => {\r\n        let randomWord = this.state.randomWords[Math.floor(Math.random() * this.state.randomWords.length)]\r\n        this.setState({userInput:randomWord})\r\n    }    \r\n    \r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        let result = await axios({\r\n            method: 'GET',\r\n            url: `https://api.datamuse.com/words`,\r\n            params: {\r\n                topics: this.state.userInput,\r\n                max: 40\r\n            }\r\n        })\r\n        \r\n        const generatedWords = result.data.map((value) => {\r\n            return {content: value.word, id: JSON.stringify(value.score), disabled: false}\r\n        })\r\n        \r\n        this.props.setGeneratedWords(generatedWords)\r\n\r\n        // Now get the functional words\r\n        result = await axios({\r\n            method: 'GET',\r\n            url: `https://api.datamuse.com/words`,\r\n            params: {\r\n                rel_bga: this.state.userInput,\r\n                max: 20\r\n            }\r\n        })\r\n\r\n        const functionalWords = result.data.map((value) => {\r\n            return { content: value.word, id: JSON.stringify(value.score) }\r\n        })\r\n\r\n        this.props.setFunctionalWords(functionalWords)\r\n        this.props.changePage('gameBoard')\r\n    }    \r\n\r\n    render() {\r\n        const { userInput } = this.state\r\n        return (\r\n            <>\r\n                <form action=\"\" onSubmit={this.handleSubmit}>\r\n                    <MuiThemeProvider theme={theme}>\r\n\r\n                        <InputAutocomplete onTextChange={this.onTextChange} autoCompleteWords={this.state.autoCompleteWords} onAutoCompleteItemSelected={this.onAutoCompleteItemSelected} \r\n                        userInput = {userInput} \r\n                        borderColor=\"primary\"\r\n                        />\r\n                        </MuiThemeProvider>\r\n\r\n                    <button className=\"main-button\" type=\"submit\">\r\n                        Get Started ➡\r\n                    </button>\r\n                </form>\r\n                <button className=\"secondary-button\" \r\n                onClick={this.getRandomWord}>\r\n                    Generate Word ⚡\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n}  \r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\nimport Search from './Search.js'\r\nimport imgPath from '../assets/illustrations--landing.png'\r\n\r\nclass Landing extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"app__container__leftLanding\">\r\n                    <h1 className=\"main-header\">Recreate the IRL fun of magnetic poetry</h1>\r\n                    <div className=\"container__form\">\r\n                        <Search changePage={this.props.changePage}\r\n                            setGeneratedWords={this.props.setGeneratedWords} setFunctionalWords={this.props.setFunctionalWords}/>\r\n                        <p className=\"main-paragraph\">Give us your own prompt to kick things off or let us generate a word for you.</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"app__container__rightLanding\">\r\n                    <img src={imgPath} alt=\"illustration of a person moving one post-it from a board of 18 other post-its\"/>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Landing","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyDoTP0Xz-PygNrXuRREHvJvOIdOk1kEbVI\",\r\n    authDomain: \"fridgemagnetpoems.firebaseapp.com\",\r\n    databaseURL: \"https://fridgemagnetpoems.firebaseio.com\",\r\n    projectId: \"fridgemagnetpoems\",\r\n    storageBucket: \"fridgemagnetpoems.appspot.com\",\r\n    messagingSenderId: \"17676352973\",\r\n    appId: \"1:17676352973:web:bb2f5253a5a36717a11884\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport imgInstruct from '../assets/illustrations--instruct.png'\r\nimport imgIllustrations from '../assets/illustrations--save.png'\r\n\r\nimport firebase from './firebase.js';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#1A4542',\r\n        },\r\n    }\r\n});\r\n\r\nclass Modal extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            hide : false,\r\n            inputTitle: '',\r\n            inputAuthor: ''\r\n        }\r\n    }\r\n\r\n    hideModal = () => this.setState({hide: true})\r\n    handleSubmit = (e) => e.preventDefault()\r\n    bindInputAuthor = (e) => this.setState({inputAuthor: e.target.value})\r\n    bindInputTitle = (e) => this.setState({inputTitle: e.target.value})\r\n\r\n    animationEnd = (e) => {\r\n        if (this.state.hide) {\r\n        this.props.showModal(false)\r\n        }\r\n        this.setState({hide: false})\r\n    }\r\n    \r\n    savePoemClick = () => {\r\n        const { sortedList } = this.props // destructuring for clean code\r\n        const { inputTitle, inputAuthor } = this.state\r\n        const maxWordsInPoem = 20 // placeholder number for now\r\n        if (sortedList.length <= maxWordsInPoem && sortedList.length > 5) {\r\n            const dbRef = firebase.database().ref()\r\n            const dataObjToFirebase = {\r\n                title: inputTitle,\r\n                author: inputAuthor,\r\n                poem: sortedList\r\n            }\r\n            dbRef.push(dataObjToFirebase)\r\n        // 2nd level error handling:\r\n        } else if (this.state.sortedList.length < 6) {\r\n            alert(\"You need more than 5 words in your poem.\")\r\n        } else if (sortedList.length > maxWordsInPoem ) {\r\n            alert(`Your poem is too long! Nothing longer than ${maxWordsInPoem} please.`)\r\n        } else {\r\n            alert(\"Safi, please stop bringing my shit again.\")\r\n        }\r\n        this.hideModal()\r\n    }\r\n\r\n    render() {\r\n        const { show, whichModal } = this.props\r\n        const { hide, inputAuthor, inputTitle } = this.state\r\n        return(\r\n            <div \r\n            className={`app__container__modal \r\n                ${hide ? \"slideLeft\" : \"\"} \r\n                ${show ? \"slideRight\" : \"\"}`}\r\n            onAnimationEnd={(e) => this.animationEnd(e)}>\r\n                {   // check prop to see which modal to show:\r\n                    whichModal === \"start\" && // START modal: \r\n                    <div className=\"app__container__modal__modalInner modalStart\">\r\n                        <img src={imgInstruct} alt=\"illustration of a person deep in thought\"/>\r\n                        <h2>How it works</h2>\r\n                        <p>We've generated a bunch of words for you on the left. Simply drag and drop them into your canvas on the right!</p>\r\n                        <button \r\n                        className=\"start_btn\"\r\n                        onClick={this.hideModal}>Start <span>🧲</span></button>\r\n                    </div>\r\n                }\r\n                {   // check prop to see which modal to show:\r\n                    whichModal === \"share\" && // SHARE modal: \r\n                    <div className=\"app__container__modal__modalInner modalShare\">\r\n                        <img src={imgIllustrations} alt=\"illustration of a person sharing ideas to the digital cloud\"/>\r\n                        <h2>Share your poem</h2>\r\n                        <form className=\"share_inputs\" action=\"\" onSubmit={this.handleSubmit}>\r\n                            <MuiThemeProvider theme={theme}>\r\n                                <TextField \r\n                                className=\"share_title\"\r\n                                variant=\"outlined\"\r\n                                label=\"Title\"\r\n                                placeholder=\"\"\r\n                                margin=\"normal\"\r\n                                helperText=\"Name your masterpiece\"\r\n                                margin=\"normal\"\r\n                                size=\"small\"\r\n                                id=\"poemTitle\"\r\n                                value={inputTitle}\r\n                                onChange={this.bindInputTitle}\r\n                                />\r\n                                <TextField \r\n                                className=\"share_author\"\r\n                                variant=\"outlined\"\r\n                                label=\"Author\"\r\n                                placeholder=\"\"\r\n                                margin=\"normal\"\r\n                                borderColor=\"primary\"\r\n                                helperText=\"sign your masterpiece\"\r\n                                margin=\"normal\"\r\n                                size=\"small\"\r\n                                id=\"poemAuthor\"\r\n                                value={inputAuthor}\r\n                                onChange={this.bindInputAuthor}\r\n                                />\r\n                            </MuiThemeProvider>\r\n                            <button className=\"gallery_btn\"\r\n                            onClick={this.savePoemClick}>\r\n                                Submit\r\n                            </button>\r\n                            <button className=\"share_btn\"\r\n                            onClick={this.hideModal}>\r\n                                Cancel\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\n\r\nclass GeneratedWord extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n \r\n    handleClick = (e) => {\r\n        this.props.generatedWordClick(this.props.word)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <button key={this.props.word.id} id={this.props.word.id}\r\n                className={\"app__container__gameBoard__generated__item\" + (this.props.word.disabled ? \" disabled\" : \"\")}\r\n                disabled={this.props.word.disabled}\r\n                onClick={this.handleClick}>\r\n                {this.props.word.content}\r\n            </button>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GeneratedWord","import React, { Component } from 'react';\r\nimport Modal from './Modal.js'\r\nimport GeneratedWord from './GeneratedWord.js'\r\nimport { ListManager } from 'react-beautiful-dnd-grid';\r\nimport { TwitterShareButton } from \"react-share\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst sortList = (list) => list.slice().sort((first, second) => first.order - second.order)\r\n// draggable items generated by beautiful-dnd-grid:\r\nconst ListElement = ({ item: { content } }) => \r\n    <div className=\"app__container__gameBoard__dragbox__item\">{content}</div>\r\n\r\nclass GameBoard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            modal: true,\r\n            modalToShow: 'start',\r\n            sortedList: [],\r\n            wordOrder: 0,\r\n        }\r\n        \r\n    }\r\n\r\n    showModal = (modalShowBoolean) => this.setState({modal: modalShowBoolean})\r\n    sortList = () => this.setState({sortedList: sortList(this.state.sortedList)})\r\n    \r\n    reorderList = (sourceIndex, destinationIndex) => {\r\n        if (destinationIndex === sourceIndex) {\r\n            return;\r\n        }\r\n        const list = this.state.sortedList;\r\n        if (destinationIndex === 0) {\r\n            list[sourceIndex].order = list[0].order - 1;\r\n            this.sortList();\r\n            return;\r\n        }\r\n        if (destinationIndex === list.length - 1) {\r\n            list[sourceIndex].order = list[list.length - 1].order + 1;\r\n            this.sortList();\r\n            return;\r\n        }\r\n        if (destinationIndex < sourceIndex) {\r\n            list[sourceIndex].order = (list[destinationIndex].order + list[destinationIndex - 1].order) / 2;\r\n            this.sortList();\r\n            return;\r\n        }\r\n        list[sourceIndex].order = (list[destinationIndex].order + list[destinationIndex + 1].order) / 2;\r\n        this.sortList();\r\n    }\r\n    \r\n    generatedWordClick = (wordObject) => {\r\n        const { sortedList, wordOrder } = this.state\r\n        const { id, content } = wordObject\r\n        // filter word out if it is already in sortedList\r\n        const newList = [...sortedList].filter((item) => item.content != wordObject.content)\r\n        newList.push({\r\n            id: id, \r\n            order: wordOrder, \r\n            content: content\r\n        });\r\n        \r\n        this.setState({\r\n            sortedList: sortList(newList),\r\n            wordOrder: wordOrder + 1\r\n        })\r\n\r\n        this.props.disableWord(wordObject.id);\r\n    }\r\n\r\n    saveToGalleryClick = () => {\r\n        const { sortedList } = this.state\r\n        const maxWordsInPoem = 20 // placeholder number for now\r\n        if (sortedList.length <= maxWordsInPoem && sortedList.length > 5) {\r\n            this.setState({modalToShow: \"share\"})\r\n            this.showModal(true)\r\n        // 1st level error handling:\r\n        } else if (this.state.sortedList.length < 6) {\r\n            alert(\"You need more than 5 words in your poem.\")\r\n        } else if (sortedList.length > maxWordsInPoem ) {\r\n            alert(`Your poem is too long! Nothing longer than ${maxWordsInPoem} please.`)\r\n        } else {\r\n            alert(\"Safi, please stop bringing my shit again.\")\r\n        }\r\n    }\r\n\r\n    clearPoem = () => {\r\n        this.setState({\r\n            sortedList: [],\r\n            wordOrder: 0\r\n        })\r\n\r\n        // remove disabled and disabled style from words: \r\n        this.props.enableAllWords();\r\n    }\r\n\r\n    poemString = () => {\r\n        const rawWords = this.state.sortedList.map(wordObject => wordObject.content)\r\n        return rawWords.join(' ')\r\n    }\r\n\r\n    render() {\r\n        const { sortedList, modal, modalToShow, wordOrder } = this.state\r\n        return(\r\n            <>\r\n                <Modal show={modal} showModal={this.showModal} \r\n                whichModal={modalToShow} changePage={this.props.changePage} \r\n                sortedList={sortedList} />\r\n                <div className=\"app__container__gameBoard\">\r\n                    <div className=\"app__container__gameBoard__generated\">\r\n                        <h2>Themed words:</h2>\r\n                        {\r\n                            this.props.generatedWords.map((word) => {\r\n                                return(\r\n                                    <GeneratedWord id={word.id} word={word} generatedWordClick={this.generatedWordClick} />\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"app__container__gameBoard__dragbox\">\r\n                        <h2>Create a 6 - 20 words poem:</h2>\r\n                        <p>{wordOrder} / 20</p>\r\n                        <ListManager\r\n                        items={sortedList}\r\n                        direction=\"horizontal\"\r\n                        maxItems={5}\r\n                        // render={(item) => <ListElement word={item} generatedWordClick={() => {}} />}\r\n                        render={(item) => <ListElement item={item} />}\r\n                        onDragEnd={this.reorderList} />\r\n                        <button onClick={this.clearPoem}>Clear</button>\r\n                        <button onClick={this.saveToGalleryClick}>Save to Gallery</button>\r\n                        <TwitterShareButton url=\"https://bit.ly/2yHFNdM\"\r\n                        title={`Check out my poem!\\n${this.poemString()}\\nCreate your own:`} >\r\n                            <button>Share <FontAwesomeIcon icon={faTwitter}/></button>\r\n                        </TwitterShareButton>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nclass Gallery extends Component {\r\n    componentDidMount() {\r\n        // get data from FB, map over data to load on DOM\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.on('value', (result) => {\r\n            const data = result.val()\r\n        })\r\n    }\r\n\r\n    goHome = () => {\r\n        // go back to landing\r\n    }\r\n\r\n    render() { \r\n        const { changePage } = this.props\r\n        return (\r\n            // check prop to see which modal to show:\r\n            <div className=\"app__container__gallery\">\r\n                <h1>Some Poetic Title for a Gallery</h1>\r\n                <div className=\"app__container__gallery__grid\">\r\n                    {/* map over array of data from firebase */}\r\n                </div>\r\n                <button>More v</button>\r\n                <button onClick={() => changePage('landing')}>Home</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gallery;","import React, { Component } from 'react';\r\nimport Landing from './components/Landing.js';\r\nimport GameBoard from './components/GameBoard'\r\nimport Gallery from './components/Gallery.js';\r\n\r\nimport './styles/styles.scss';\r\n/******** set poem max length at GameBoard.js ln 75 ********/\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n        currentPage : 'landing',\r\n        generatedWords: [],\r\n        functionalWords: []\r\n        }\r\n    }\r\n    //Make sure no words have the same ID\r\n    getUniqueWords = (words) => {\r\n        let uniqueWords = []\r\n\r\n        for (let i = 0; i < words.length; i++) {\r\n            let keyExists = false;\r\n            let word = words[i];\r\n\r\n            for(let j = 0; j < uniqueWords.length; j++) {\r\n                if (word.id == uniqueWords[j].id) {\r\n                    keyExists = true;\r\n                }\r\n            }\r\n            if (!keyExists) {\r\n                uniqueWords.push(word);\r\n            }\r\n        }\r\n\r\n        return uniqueWords\r\n    }\r\n\r\n    enableAllWords = () => {\r\n        // Set \"disabled\" to false for all generated word\r\n        let generatedWords = this.state.generatedWords.map(word => {\r\n            word.disabled = false;\r\n            return word;\r\n        })\r\n\r\n        this.setState({\r\n            generatedWords: generatedWords\r\n        })\r\n    }\r\n\r\n    disableWord = (id) => {\r\n        // Given the ID of a word, disable only that word        \r\n        let generatedWords = this.state.generatedWords.map(word => {\r\n\r\n            if(word.id === id) {\r\n                word.disabled = true;\r\n            }\r\n\r\n            return word;\r\n        })\r\n\r\n        this.setState({\r\n            generatedWords: generatedWords\r\n        })\r\n    }\r\n    //Words generated based on query saved to state \r\n    setGeneratedWords = (generatedWords) => {\r\n\r\n        let uniqueWords = this.getUniqueWords(generatedWords);\r\n\r\n        this.setState({\r\n            generatedWords: uniqueWords\r\n        })\r\n    }\r\n\r\n    //Functional words generated based on query saved to state\r\n    setFunctionalWords = (functionalWords) => {\r\n\r\n        let uniqueWords = this.getUniqueWords(functionalWords);\r\n\r\n        this.setState({\r\n            functionalWords: uniqueWords\r\n        })\r\n    }\r\n\r\n    changePage = (targetPage) => this.setState({currentPage: targetPage})\r\n\r\n    render() {\r\n        const { currentPage, generatedWords, functionalWords } = this.state\r\n        return (\r\n            <div className=\"app wrapper\">\r\n                <nav className=\"app__nav\">\r\n                    <ul>\r\n                        <li className=\"nav__branding\"\r\n                        onClick={() => this.changePage('landing')}>\r\n                            Fridge Verses\r\n                        </li>\r\n                        {/* testing purpose: */}\r\n                        <li className=\"nav__link\"\r\n                        onClick={() => this.changePage('gameBoard')}>\r\n                            game test\r\n                        </li>\r\n                        <li className=\"nav__link\" \r\n                        onClick={() => this.changePage('gallery')}>\r\n                            Gallery\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <div className=\"app__container\">\r\n                    {currentPage === 'landing' &&\r\n                        <Landing changePage={this.changePage} \r\n                        setGeneratedWords={this.setGeneratedWords} setFunctionalWords={this.setFunctionalWords} /> }\r\n                    {currentPage === 'gameBoard' &&\r\n                        <GameBoard changePage={this.changePage}\r\n                        generatedWords={generatedWords} functionalWords={functionalWords}\r\n                        enableAllWords={this.enableAllWords}\r\n                        disableWord={this.disableWord}\r\n                        />}\r\n                    {currentPage === 'gallery' &&\r\n                        <Gallery changePage={this.changePage} />}\r\n                </div>\r\n                <footer className=\"app__footer\">\r\n                    <div>\r\n\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/illustrations--landing.53f28855.png\";","module.exports = __webpack_public_path__ + \"static/media/illustrations--instruct.dff84eab.png\";","module.exports = __webpack_public_path__ + \"static/media/illustrations--save.783bf5a5.png\";"],"sourceRoot":""}